<?php
/**
 * @file
 *   Install functionality for the "Sample" installation profile.
 *
 *   Copyright (C) 2015-2017  Red Bottle Design, LLC
 *
 *   This program is free software: you can redistribute it and/or modify it
 *   under the terms of the GNU General Public License as published by the Free
 *   Software Foundation, either version 3 of the License, or (at your option)
 *   any later version.
 *
 *   This program is distributed in the hope that it will be useful, but WITHOUT
 *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *   more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Guy Paddock (guy@redbottledesign.com)
 */
require_once('sample.constants.inc');

/**
 * Implements hook_profiler_install_tasks().
 *
 * Define custom actions to set up the site for this profile.
 */
function sample_profiler_install_tasks() {
  $tasks = array(
    'sample_import_content' => array(
      'display_name'  => st('Import content'),
      'type'          => 'batch',
      'display'       => TRUE,
    ),
  );

  return $tasks;
}

/**
 * Implements hook_site_pre_install().
 */
function sample_site_pre_install() {
  watchdog(
    SA_PROFILE_NAME,
    'Performing site pre-install.',
    array(),
    WATCHDOG_DEBUG);
}

/**
 * Implements hook_site_post_install().
 */
function sample_site_post_install() {
  watchdog(
    SA_PROFILE_NAME,
    'Performing site post-install.',
    array(),
    WATCHDOG_DEBUG);

  _sample_setup_content_types();
  _sample_setup_default_user_permissions();
  _sample_setup_default_menu_links();
}

/**
 * Imports site content at the end of site install.
 *
 * @return array
 *  The content import batch operations.
 */
function sample_import_content() {
  $operations = array();

  // Run all available migrations.
  $migrations = migrate_migrations();

  watchdog(
    SA_PROFILE_NAME,
    'Installation profile will perform @count content import migrations.',
    array('@count' => count($migrations)),
    WATCHDOG_DEBUG);

  foreach ($migrations as $machine_name => $migration) {
    $operations[] =
      array(
        '_sample_import',
        array($machine_name, t('Importing content.')));
  }

  $module_path    = drupal_get_path('profile', SA_PROFILE_NAME);
  $callbacks_file = $module_path . '/sample.install_callbacks.inc';

  $batch = array(
    'title'       => t('Importing content'),
    'operations'  => $operations,
    'file'        => $callbacks_file,
  );

  return $batch;
}

/**
 * Set-up all base-level content types needed by this profile.
 *
 * <strong>NOTE:</strong> This only installs the most basic content types.
 * Everything else is handled through Features.
 */
function _sample_setup_content_types() {
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type'        => 'page',
      'name'        => st('Basic page'),
      'base'        => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom'      => 1,
      'modified'    => 1,
      'locked'      => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);

    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type'    => 'node',
      'bundle'  => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
  );

  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page',   array('status'));
  variable_set('comment_page',        COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);
}

/**
 * Creates an "administrator" role, assigns the "admin" user to it, and then
 * automatically assigns the role all available permissions.
 */
function _sample_setup_default_user_permissions() {
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role         = new stdClass();
  $admin_role->name   = 'administrator';
  $admin_role->weight = 2;

  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Sets-up default menu links.
 */
function _sample_setup_default_menu_links() {
  // Create a Home link in the main menu.
  $item = array(
    'link_title'  => st('Home'),
    'link_path'   => '<front>',
    'menu_name'   => 'main-menu',
  );

  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();
}
