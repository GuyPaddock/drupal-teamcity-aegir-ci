<?php
/**
 * @file
 *   Install hooks for the "Sample Development UI" feature.
 *
 *   Copyright (C) 2015-2017  Red Bottle Design, LLC
 *
 *   This program is free software: you can redistribute it and/or modify it
 *   under the terms of the GNU General Public License as published by the Free
 *   Software Foundation, either version 3 of the License, or (at your option)
 *   any later version.
 *
 *   This program is distributed in the hope that it will be useful, but WITHOUT
 *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *   more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Guy Paddock (guy@redbottledesign.com)
 */

require_once('sample_devel.constants.inc');

/**
 * Implementation of hook_install().
 */
function sample_devel_install() {
  _sample_devel_initialize_shortcut_sets();
}

/**
 * Implementation of hook_site_post_install().
 */
function sample_devel_site_post_install() {
  _sample_devel_setup_blocks();
  _sample_devel_set_site_name();

  _sample_devel_grant_developer_permissions();
}

/**
 * Initializes developer-friendly shortcut sets.
 */
function _sample_devel_initialize_shortcut_sets() {
  watchdog(
    SADE_MODULE_NAME,
    'Creating "Developer" shortcut set.',
    array(),
    WATCHDOG_INFO);

  $shortcut_set           = new stdClass();
  $shortcut_set->title    = 'Developer';
  $shortcut_set->set_name = 'developer-set';
  $shortcut_set->links    = array(
    array(
      'link_title'  => 'Add content',
      'link_path'   => 'node/add',
      'weight'      => 0,
    ),

    array(
      'link_title'  => 'Content types',
      'link_path'   => 'admin/structure/types',
      'weight'      => 1,
    ),

    array(
      'link_title'  => 'Taxonomy',
      'link_path'   => 'admin/structure/taxonomy',
      'weight'      => 2,
    ),

    array(
      'link_title'  => 'Performance',
      'link_path'   => 'admin/config/development/performance',
      'weight'      => 4,
    ),

    array(
      'link_title'  => 'Features',
      'link_path'   => 'admin/structure/features',
      'weight'      => 5,
    ),

    array(
      'link_title'  => 'Rules',
      'link_path'   => 'admin/config/workflow/rules',
      'weight'      => 6,
    ),

    array(
      'link_title'  => 'Views',
      'link_path'   => 'admin/structure/views',
      'weight'      => 7,
    ),
  );

  shortcut_set_save($shortcut_set);

  watchdog(
    SADE_MODULE_NAME,
    '"Developer" shortcut set created.',
    array(),
    WATCHDOG_INFO);

  // Assign admin to the developer shortcut set.
  shortcut_set_assign_user($shortcut_set, user_load(1));
}

/**
 * Enables the specified block from the specified module, and places it in the
 * specified region of the specified theme.
 *
 * @param $module
 *   The module that defines the block.
 * @param $delta
 *   The identifier for the block within the module.
 * @param $theme
 *   The theme for which the block should be enabled.
 * @param $region
 *   The region in the theme in which the block should appear.
 * @param $weight
 *   The relative weight of the block within the region.
 */
function sample_devel_enable_block($module, $delta, $theme, $region, $weight) {
  watchdog(
    SADE_MODULE_NAME,
    'Activating block %module:%delta',
    array(
      '%module' => $module,
      '%delta'  => $delta,
    ),
    WATCHDOG_DEBUG);

  db_merge('block')
    ->key(array(
      'theme'       => $theme,
      'delta'       => $delta,
      'module'      => $module))
    ->fields(array(
      'region'      => ($region == BLOCK_REGION_NONE ? '' : $region),
      'status'      => (int) ($region != BLOCK_REGION_NONE),
      'visibility'  => 0,
    ))
    ->execute();
}

/**
 * Adds any developer-friendly blocks to the theme (Masquerade, etc).
 */
function _sample_devel_setup_blocks() {
  if (module_exists('masquerade')) {
    // This makes it much, much easier to test user permissions.
    sample_devel_enable_block('masquerade', 'masquerade', 'bartik', 'footer', 50);
  };
}

/**
 * Sets the site name to something more friendly than the domain name.
 */
function _sample_devel_set_site_name() {
  $build_number = _sample_devel_get_site_build_number();

  if (!empty($build_number)) {
    $title_suffix = ' - Build #' . $build_number;
  }
  else {
    $title_suffix = '';
  }

  variable_set('site_name', SA_PROFILE_FRIENDLY_NAME . " Dev" . $title_suffix);
}

/**
 * Make debugging easier by granting all users the ability to see developer
 * info.
 */
function _sample_devel_grant_developer_permissions() {
  $devel_permissions = array('access devel information');

  // Grant anonymous and authenticated users the ability to see developer info.
  user_role_grant_permissions(1, $devel_permissions);
  user_role_grant_permissions(2, $devel_permissions);
}

/**
 * Extracts the CI build number from the URL of the site (if applicable) and
 * returns it.
 *
 * This method depends entirely on the site URL being set properly during
 * install.
 *
 * @return
 *  Either the CI build number, or {@code NULL} if this site is not being
 *  installed by a CI build.
 */
function _sample_devel_get_site_build_number() {
  $site_url     = url("<front>", array("absolute" => TRUE));
  $url_matches  = preg_match('/^http(s)?:\/\/build\-([0-9]+)\..+\.com\/$/', $site_url, $matches);

  if ($url_matches && count($matches) > 2) {
    $build_number = $matches[2];
  }
  else {
    $build_number = NULL;
  }

  return $build_number;
}
